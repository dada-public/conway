{"mappings":"ACAO,MAAM,4CAAO;IAClB,MAAK,IAAI,EAAE,IAAI;QACb,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG,MAAM,MAChB,IAAI,GACJ,GAAG,CAAC,IAAM,MAAM,MAAM,IAAI,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,SAAS,aAAa,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,WAAW,GAAG;QAEnB,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,MAAO;YACxC,MAAM,KAAK,SAAS,aAAa,CAAC;YAClC,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,MAAO;gBACxC,MAAM,KAAK,SAAS,aAAa,CAAC;gBAClC,GAAG,YAAY,CAAC,YAAY;gBAC5B,GAAG,YAAY,CAAC,YAAY;gBAC5B,GAAG,WAAW,CAAC;YACjB;YACA,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QACzB;QAEA,KAAK,WAAW,CAAC,IAAI,CAAC,KAAK;QAE3B,SAAS,gBAAgB,CAAC,aAAa;YACrC,IAAI,CAAC,WAAW,GAAG;QACrB;QAEA,SAAS,gBAAgB,CAAC,WAAW;YACnC,IAAI,CAAC,WAAW,GAAG;QACrB;QAEA,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAE,MAAM,EAAE;YAC9C,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,OAAO,CAAC,OAAO;gBAC5C,MAAM,CAAC,KAAK,IAAI,GAAG;oBACjB,OAAO,YAAY,CAAC;oBACpB,OAAO,YAAY,CAAC;iBACrB;gBACD,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;YACnD;QACF;QAEA,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,UAAE,MAAM,EAAE;YAClD,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,OAAO,CAAC,SAAS,IAAI,CAAC,WAAW,EAAE;gBAChE,MAAM,CAAC,KAAK,IAAI,GAAG;oBACjB,OAAO,YAAY,CAAC;oBACpB,OAAO,YAAY,CAAC;iBACrB;gBACD,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK;YAC9B;QACF;IACF;IAEA,cAAa,GAAG,EAAE,GAAG,EAAE,KAAK;QAC1B,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;QAC5C,QAAQ,KAAK,SAAS,CAAC,GAAG,CAAC,WAAW,KAAK,SAAS,CAAC,MAAM,CAAC;QAC5D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG;IACzB;IAEA,cAAa,GAAG,EAAE,GAAG;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;IAC7B;AACF;;;AD3DA,CAAA,GAAA,yCAAG,EAAE,IAAI,CAAC,IAAI,SAAS,aAAa,CAAC","sources":["src/index.js","src/modules/Grid.js"],"sourcesContent":["import {Grid} from \"./modules/Grid\"\n\nGrid.init(16, document.querySelector(\"main\"))\n","export const Grid = {\n  init(size, root) {\n    this.size = size;\n    this.cells = Array(size)\n      .fill()\n      .map(() => Array(size).fill(false));\n    this.table = document.createElement(\"table\");\n    this.isMouseDown = false;\n    this.interactive = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const tr = document.createElement(\"tr\");\n      for (let col = 0; col < this.size; col++) {\n        const td = document.createElement(\"td\");\n        td.setAttribute(\"data-col\", col);\n        td.setAttribute(\"data-row\", row);\n        tr.appendChild(td);\n      }\n      this.table.appendChild(tr);\n    }\n\n    root.appendChild(this.table);\n\n    document.addEventListener(\"mousedown\", () => {\n      this.isMouseDown = true;\n    });\n\n    document.addEventListener(\"mouseup\", () => {\n      this.isMouseDown = false;\n    });\n\n    this.table.addEventListener(\"click\", ({ target }) => {\n      if (this.interactive && target.matches(\"td\")) {\n        const [col, row] = [\n          target.getAttribute(\"data-col\"),\n          target.getAttribute(\"data-row\"),\n        ];\n        this.setCellValue(row, col, !this.cells[row][col]);\n      }\n    });\n\n    this.table.addEventListener(\"mousemove\", ({ target }) => {\n      if (this.interactive && target.matches(\"td\") && this.isMouseDown) {\n        const [col, row] = [\n          target.getAttribute(\"data-col\"),\n          target.getAttribute(\"data-row\"),\n        ];\n        this.setCellValue(row, col, true);\n      }\n    });\n  },\n\n  setCellValue(row, col, value) {\n    const cell = this.table.rows[row].cells[col];\n    value ? cell.classList.add(\"alive\") : cell.classList.remove(\"alive\");\n    this.cells[row][col] = value;\n  },\n\n  getCellValue(row, col) {\n    return this.cells[row][col];\n  },\n};"],"names":[],"version":3,"file":"index.js.map"}